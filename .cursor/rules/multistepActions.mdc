---
description: This document describes the requirements and design constraints of multi-step components in interactive tutorials.  This document pairs well with interactiveRequirements.mdc
alwaysApply: false
---
# Multi-step interactive components.

The following file is a design discussion, requirements, and Q&A which constrains the design and build of the multi-step interactive component.  The key insight from the very top is that it is a hybrid of a regular "interactive step" together with an interactive section.  This will be further discussed in great detail.

## Design Discussion

An interactive multi-step component is NOT a section.  It shares execution like a section, in that a multi-step component will be responsible for coordinating multiple discrete actions with a single "Do it" button.   For a multi-step component, there will be no "Show me" button, because you cannot show multiple different dependent actions in sequence.

Relative to our section & step design in @interactiveRequirements.mdc, multi step components are just regular steps.  So for example in the section outline, they should be owned by a section component and would coordinate state just like any other interactive step.   But I want to be able to reuse the logic of doing "one step after another in a sequence", like InteractiveSection does.  These semantics will be the same.

A multi-step works like any other interactivestep for purposes of things like completion checking, in progress flagging, and so on.  Requirements checking needs to be done on each individual action within the multi-step workflow before it proceeds, to keep the system safe though, which could introduce some interesting quirks.

Finally, a regular interactive step is expressed like this in HTML, and we'll need to adapt it for multi-step.  Here's what a regular set of 3 interactive step looks like:

              <li class="interactive" data-requirements="navmenu-open"
                  data-reftarget="a[data-testid='data-testid Nav menu item'][href='/admin/plugins']"
                  data-targetaction='highlight'>
                Click Administration &gt; Plugins &amp; Data in the left-side menu.</li>

              <li class="interactive" data-reftarget="a[href='/plugins']" data-targetaction='highlight'>
                  Click the Plugins button
              </li>

              <li class="interactive" data-reftarget="input[type='text']" data-targetaction='formfill' data-targetvalue='Business News'>
                 Use the search bar to search for "Business News" (the plugin we'll be using)
              </li>

              <li class="interactive" data-reftarget="a[href='/plugins/volkovlabs-rss-datasource']" data-targetaction='highlight'>
                Click the Business News button that appears.
              </li>

Notice that we can put attributes all on the li element because we're only doing one thing.   A multi-step componet will be specified like this in HTML:

              <li class="interactive" data-targetaction="multistep">
                <span class="interactive" data-requirements="navmenu-open"
                  data-reftarget="a[data-testid='data-testid Nav menu item'][href='/admin/plugins']"
                  data-targetaction='highlight'/>
                <span class="interactive" data-reftarget="a[href='/plugins']" data-targetaction='highlight'/>
                <span class="interactive" data-reftarget="input[type='text']" data-targetaction='formfill' data-targetvalue='Business News'/>
                Take 3 steps at once!
              </li>

Critical differences:
* The interactive element is specified as data-targetaction="multistep"
* The interactive element contains a series of class="interactive" empty <span> elements, whose attributes carry the details of each step to be executed.

Examine all of this information carefully, and discuss your plans of how you would implement this.  There are at least three concerns to be aware of:

(1) How to implement a multi-step interactive component
(2) How to process the HTML so that the raw HTML I'm showing you gets transformed into that type of component
(3) How to wire the requirements checking and execution system so that the result of clicking the "Do it" button on "Take 3 steps at once!" would end up being the same result as if you clicked each "Do it" button in sequence, in the first example.

## Design Q&A 

Question 1: When the "Do it" button is clicked on a multi-step: Should it visually highlight each internal action as it executes them (like InteractiveSection does with its "show then do" pattern)?

Answer: yes.  The pattern should remain the same as with interactive section, in terms of what the user sees.

Question 2: I see the first span has data-requirements="navmenu-open" - how should requirements work?

Answer:  Option B: Check each action's requirements just-in-time before executing that specific action.  This is necessary because earlier steps can change whether later steps requirements are met or not.  This makes options A and C not workable.  The component should have error messages so that if some intermediate sub-step's requirements have failed, we'll need a visual indicaton of why that is.  You can use the existing pattern of disabling the "Do it" button and adding a message to that container as the other components already do.

Question 3: 3a. State Management & Completion / Should each internal span track its own completion state, or just the multi-step as a whole?

Answer: the multi-step as a whole either succeeds or fails.  The user should not see the internal spans, we don't want these to be rendered visually, so they will not have any visual state associated with them.

Question 3b:  From the parent section's perspective, is the multi-step "complete" only when ALL internal actions succeed?

Answer:  The parent here is the "multistep" component.  And yes, it is complete only when ALL internal actions succeed.

Question 4: HTML Processing Details.  Should these spans be self-closing (as shown) or can they contain content?  

Answer:  The spans may contain content, but it can be ignored and child elements should be removed. They are intended to be empty; these "empty spans" are only meant to be carriers of the metadata necessary for the internal actions, they are not meant to be rendered visually to the user. 

Question 4b: The parent <li> contains "Take 3 steps at once!" - where should this text appear in the rendered component?

Answer: In this regard, I want multistep components to be treated exactly like any other interactive step.  The way this text is rendered is just like the text in the earlier <li> examples would be rendered.

Question 5. Error Recovery.  If an internal action fails: Should the multi-step stop execution immediately?

Answer: Execution should stop immediately. There is no rollback mechanism.  Because the step has ended in an error, whatever that error is should be displayed to the user in the same way that a "requirements not met" message might be displayed.  Typically you can disable the "Do it" button, and display the error text in a disabled do it button in place of the text "Do it".  See other interactive components for how that pattern can be followed.

Question 6. Reusability Architecture: I'm thinking the implementation could reuse: From InteractiveStep: Requirements integration, parent coordination, completion tracking, From InteractiveSection: Sequential execution logic, step coordination, error handling

Answer: yes, this sounds like the right approach.  It is very desirable to have the sequential execution logic, step coordination, and error handling match how InteractiveSection works, we do not want a second, different implementation.  And yes, we want it to behave bery much like an InteractiveStep in every other way, so yes, this is a hybrid component, you've got it right.

Question 7: 7. Component Hierarchy - you want to know if it should be a peer of InteractiveSteps. 

Answer:  yes, that's exactly correct.  An interactivemultistep will be a peer of other interactivesteps, and will exist in an interactivesection.

I've tried to be as complete as possible, make sure to ask follow-up questions on anything that is unclear. If you're satisfied you understand the problem, give me a basic sketch of how you would implement, and I will approve or modify that plan.

## Synthesis Understanding of the Feature (This is Approved)

My Understanding

✅ Multi-step = Hybrid Component: Behaves like InteractiveStep to parent/user, but coordinates execution like InteractiveSection internally
✅ Visual Flow: Show/highlight each internal action → execute it → move to next (same as InteractiveSection)
✅ Requirements: Just-in-time checking before each internal action (since earlier actions change state)
✅ Error Handling: Stop immediately on failure, disable "Do it" button, show error message
✅ State: Only the multi-step as a whole has visual state; internal spans are invisible metadata carriers
✅ Completion: Multi-step completes only when ALL internal actions succeed

## Further Design Q&A

Question A. Requirements Checking Implementation / For just-in-time requirements checking, should I: Create a standalone checkActionRequirements(requirements) function that reuses the logic from useStepRequirements? Or try to make useStepRequirements support dynamic/just-in-time checking?

Answer: I'm not sure on this one.  If you can reuse code without substantially re-engineering it, you should reuse code.  If your judgment is that useStepRequirements would have to be substantially rewritten, then you may write a new checkActionRequirements() function that follows the same pattern. If you choose to follow the same pattern, make sure to make a comment in that function that describes the similarity & different from the other function, in case we decide to refactor this later. 

Question B. Error Display Strategy: When an internal action fails requirements, should the error show: Option 1: In the button text ("Step 2 requirements not met: navmenu-open")

Use option 1.  This follows the same pattern as any other interactive step, which is desirable.

Question C. Component File Location / Should InteractiveMultiStep go: In the existing interactive-components.tsx file alongside the other components? Or in a separate file due to its hybrid nature?

Put it into a separate file due to its hybrid nature.  Additionally, interactive-components.tsx is getting very long and complex and may be factored out into separate components in a later step anyway, so definitly keep it as a separate file.

Given your understanding and these additional answers, are you ready to proceed? 
# Multi-step interactive components.

The following file is a design discussion, requirements, and Q&A which constrains the design and build of the multi-step interactive component.  The key insight from the very top is that it is a hybrid of a regular "interactive step" together with an interactive section.  This will be further discussed in great detail.

## Design Discussion

An interactive multi-step component is NOT a section.  It shares execution like a section, in that a multi-step component will be responsible for coordinating multiple discrete actions with a single "Do it" button.   For a multi-step component, there will be no "Show me" button, because you cannot show multiple different dependent actions in sequence.

Relative to our section & step design in @interactiveRequirements.mdc, multi step components are just regular steps.  So for example in the section outline, they should be owned by a section component and would coordinate state just like any other interactive step.   But I want to be able to reuse the logic of doing "one step after another in a sequence", like InteractiveSection does.  These semantics will be the same.

A multi-step works like any other interactivestep for purposes of things like completion checking, in progress flagging, and so on.  Requirements checking needs to be done on each individual action within the multi-step workflow before it proceeds, to keep the system safe though, which could introduce some interesting quirks.

Finally, a regular interactive step is expressed like this in HTML, and we'll need to adapt it for multi-step.  Here's what a regular set of 3 interactive step looks like:

              <li class="interactive" data-requirements="navmenu-open"
                  data-reftarget="a[data-testid='data-testid Nav menu item'][href='/admin/plugins']"
                  data-targetaction='highlight'>
                Click Administration &gt; Plugins &amp; Data in the left-side menu.</li>

              <li class="interactive" data-reftarget="a[href='/plugins']" data-targetaction='highlight'>
                  Click the Plugins button
              </li>

              <li class="interactive" data-reftarget="input[type='text']" data-targetaction='formfill' data-targetvalue='Business News'>
                 Use the search bar to search for "Business News" (the plugin we'll be using)
              </li>

              <li class="interactive" data-reftarget="a[href='/plugins/volkovlabs-rss-datasource']" data-targetaction='highlight'>
                Click the Business News button that appears.
              </li>

Notice that we can put attributes all on the li element because we're only doing one thing.   A multi-step componet will be specified like this in HTML:

              <li class="interactive" data-targetaction="multistep">
                <span class="interactive" data-requirements="navmenu-open"
                  data-reftarget="a[data-testid='data-testid Nav menu item'][href='/admin/plugins']"
                  data-targetaction='highlight'/>
                <span class="interactive" data-reftarget="a[href='/plugins']" data-targetaction='highlight'/>
                <span class="interactive" data-reftarget="input[type='text']" data-targetaction='formfill' data-targetvalue='Business News'/>
                Take 3 steps at once!
              </li>

Critical differences:
* The interactive element is specified as data-targetaction="multistep"
* The interactive element contains a series of class="interactive" empty <span> elements, whose attributes carry the details of each step to be executed.

Examine all of this information carefully, and discuss your plans of how you would implement this.  There are at least three concerns to be aware of:

(1) How to implement a multi-step interactive component
(2) How to process the HTML so that the raw HTML I'm showing you gets transformed into that type of component
(3) How to wire the requirements checking and execution system so that the result of clicking the "Do it" button on "Take 3 steps at once!" would end up being the same result as if you clicked each "Do it" button in sequence, in the first example.

## Design Q&A 

Question 1: When the "Do it" button is clicked on a multi-step: Should it visually highlight each internal action as it executes them (like InteractiveSection does with its "show then do" pattern)?

Answer: yes.  The pattern should remain the same as with interactive section, in terms of what the user sees.

Question 2: I see the first span has data-requirements="navmenu-open" - how should requirements work?

Answer:  Option B: Check each action's requirements just-in-time before executing that specific action.  This is necessary because earlier steps can change whether later steps requirements are met or not.  This makes options A and C not workable.  The component should have error messages so that if some intermediate sub-step's requirements have failed, we'll need a visual indicaton of why that is.  You can use the existing pattern of disabling the "Do it" button and adding a message to that container as the other components already do.

Question 3: 3a. State Management & Completion / Should each internal span track its own completion state, or just the multi-step as a whole?

Answer: the multi-step as a whole either succeeds or fails.  The user should not see the internal spans, we don't want these to be rendered visually, so they will not have any visual state associated with them.

Question 3b:  From the parent section's perspective, is the multi-step "complete" only when ALL internal actions succeed?

Answer:  The parent here is the "multistep" component.  And yes, it is complete only when ALL internal actions succeed.

Question 4: HTML Processing Details.  Should these spans be self-closing (as shown) or can they contain content?  

Answer:  The spans may contain content, but it can be ignored and child elements should be removed. They are intended to be empty; these "empty spans" are only meant to be carriers of the metadata necessary for the internal actions, they are not meant to be rendered visually to the user. 

Question 4b: The parent <li> contains "Take 3 steps at once!" - where should this text appear in the rendered component?

Answer: In this regard, I want multistep components to be treated exactly like any other interactive step.  The way this text is rendered is just like the text in the earlier <li> examples would be rendered.

Question 5. Error Recovery.  If an internal action fails: Should the multi-step stop execution immediately?

Answer: Execution should stop immediately. There is no rollback mechanism.  Because the step has ended in an error, whatever that error is should be displayed to the user in the same way that a "requirements not met" message might be displayed.  Typically you can disable the "Do it" button, and display the error text in a disabled do it button in place of the text "Do it".  See other interactive components for how that pattern can be followed.

Question 6. Reusability Architecture: I'm thinking the implementation could reuse: From InteractiveStep: Requirements integration, parent coordination, completion tracking, From InteractiveSection: Sequential execution logic, step coordination, error handling

Answer: yes, this sounds like the right approach.  It is very desirable to have the sequential execution logic, step coordination, and error handling match how InteractiveSection works, we do not want a second, different implementation.  And yes, we want it to behave bery much like an InteractiveStep in every other way, so yes, this is a hybrid component, you've got it right.

Question 7: 7. Component Hierarchy - you want to know if it should be a peer of InteractiveSteps. 

Answer:  yes, that's exactly correct.  An interactivemultistep will be a peer of other interactivesteps, and will exist in an interactivesection.

I've tried to be as complete as possible, make sure to ask follow-up questions on anything that is unclear. If you're satisfied you understand the problem, give me a basic sketch of how you would implement, and I will approve or modify that plan.

## Synthesis Understanding of the Feature (This is Approved)

My Understanding

✅ Multi-step = Hybrid Component: Behaves like InteractiveStep to parent/user, but coordinates execution like InteractiveSection internally
✅ Visual Flow: Show/highlight each internal action → execute it → move to next (same as InteractiveSection)
✅ Requirements: Just-in-time checking before each internal action (since earlier actions change state)
✅ Error Handling: Stop immediately on failure, disable "Do it" button, show error message
✅ State: Only the multi-step as a whole has visual state; internal spans are invisible metadata carriers
✅ Completion: Multi-step completes only when ALL internal actions succeed

## Further Design Q&A

Question A. Requirements Checking Implementation / For just-in-time requirements checking, should I: Create a standalone checkActionRequirements(requirements) function that reuses the logic from useStepRequirements? Or try to make useStepRequirements support dynamic/just-in-time checking?

Answer: I'm not sure on this one.  If you can reuse code without substantially re-engineering it, you should reuse code.  If your judgment is that useStepRequirements would have to be substantially rewritten, then you may write a new checkActionRequirements() function that follows the same pattern. If you choose to follow the same pattern, make sure to make a comment in that function that describes the similarity & different from the other function, in case we decide to refactor this later. 

Question B. Error Display Strategy: When an internal action fails requirements, should the error show: Option 1: In the button text ("Step 2 requirements not met: navmenu-open")

Use option 1.  This follows the same pattern as any other interactive step, which is desirable.

Question C. Component File Location / Should InteractiveMultiStep go: In the existing interactive-components.tsx file alongside the other components? Or in a separate file due to its hybrid nature?

Put it into a separate file due to its hybrid nature.  Additionally, interactive-components.tsx is getting very long and complex and may be factored out into separate components in a later step anyway, so definitly keep it as a separate file.

Given your understanding and these additional answers, are you ready to proceed? 
